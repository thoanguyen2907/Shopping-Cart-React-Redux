{"ast":null,"code":"import * as types from './../constants/ActionType';\nimport * as configs from './../constants/Config';\nlet defaultState = [];\nlet cartItems = JSON.parse(localStorage.getItem(configs.CARTS_FROM_LOCAL_STOGARE));\ndefaultState = cartItems !== null && cartItems.length > 0 ? cartItems : defaultState;\n\nlet getProductPosition = (cartItems, product) => {\n  let total = cartItems.length;\n\n  for (let i = 0; i < total; i++) {\n    if (cartItems[i].product.id === product.id) return i;\n  }\n\n  return -1;\n};\n\nconst carts = (state = defaultState, action) => {\n  let {\n    product,\n    quantity\n  } = action;\n\n  switch (action.type) {\n    case types.BUY_PRODUCT:\n      console.log(action);\n      return state;\n\n    case types.UPDATE_PRODUCT:\n      return state;\n\n    case types.REMOVE_PRODUCT:\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default carts;","map":{"version":3,"sources":["/Users/thoanguyen/Downloads/react-training/React Zendvn/Chapter 4/cart practice 4/my-app/src/reducers/carts.js"],"names":["types","configs","defaultState","cartItems","JSON","parse","localStorage","getItem","CARTS_FROM_LOCAL_STOGARE","length","getProductPosition","product","total","i","id","carts","state","action","quantity","type","BUY_PRODUCT","console","log","UPDATE_PRODUCT","REMOVE_PRODUCT"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,2BAAvB;AACA,OAAO,KAAKC,OAAZ,MAAyB,uBAAzB;AAEA,IAAIC,YAAY,GAAG,EAAnB;AACA,IAAIC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBN,OAAO,CAACO,wBAA7B,CAAX,CAAhB;AACAN,YAAY,GAAIC,SAAS,KAAG,IAAZ,IAAoBA,SAAS,CAACM,MAAV,GAAkB,CAAvC,GAA2CN,SAA3C,GAAsDD,YAArE;;AACA,IAAIQ,kBAAkB,GAAG,CAACP,SAAD,EAAWQ,OAAX,KAAsB;AAC9C,MAAIC,KAAK,GAAGT,SAAS,CAACM,MAAtB;;AACA,OAAK,IAAII,CAAC,GAAC,CAAX,EAAaA,CAAC,GAACD,KAAf,EAAqBC,CAAC,EAAtB,EAAyB;AACxB,QAAGV,SAAS,CAACU,CAAD,CAAT,CAAaF,OAAb,CAAqBG,EAArB,KAA4BH,OAAO,CAACG,EAAvC,EAA2C,OAAOD,CAAP;AAC3C;;AACD,SAAO,CAAC,CAAR;AACA,CAND;;AAOA,MAAME,KAAK,GAAG,CAACC,KAAK,GAAGd,YAAT,EAAuBe,MAAvB,KAAkC;AAChD,MAAI;AAACN,IAAAA,OAAD;AAASO,IAAAA;AAAT,MAAqBD,MAAzB;;AACC,UAAOA,MAAM,CAACE,IAAd;AACC,SAAKnB,KAAK,CAACoB,WAAX;AACCC,MAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACA,aAAOD,KAAP;;AACD,SAAKhB,KAAK,CAACuB,cAAX;AACC,aAAOP,KAAP;;AACD,SAAKhB,KAAK,CAACwB,cAAX;AACA,aAAOR,KAAP;;AACA;AACC,aAAOA,KAAP;AATF;AAWA,CAbD;;AAeA,eAAeD,KAAf","sourcesContent":["import * as types from './../constants/ActionType';\nimport * as configs from './../constants/Config';\n\nlet defaultState = [];\nlet cartItems = JSON.parse(localStorage.getItem(configs.CARTS_FROM_LOCAL_STOGARE))\ndefaultState = (cartItems!==null && cartItems.length >0)? cartItems: defaultState;\nlet getProductPosition = (cartItems,product) =>{\n\tlet total = cartItems.length;\n\tfor (let i=0;i<total;i++){\n\t\tif(cartItems[i].product.id === product.id) return i;\n\t}\n\treturn -1;\n}\nconst carts = (state = defaultState, action) => {\nlet {product,quantity} = action;\n\tswitch(action.type){\n\t\tcase types.BUY_PRODUCT:\n\t\t\tconsole.log(action)\n\t\t\treturn state;\n\t\tcase types.UPDATE_PRODUCT:\n\t\t\treturn state;\n\t\tcase types.REMOVE_PRODUCT:\n\t\treturn state;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default carts;"]},"metadata":{},"sourceType":"module"}