{"ast":null,"code":"import * as types from './../constants/ActionType';\nimport * as configs from './../constants/Config';\nlet defaultState = []; // let cartItems = JSON.parse(localStorage.getItem(configs.CARTS_FROM_LOCAL_STOGARE))\n// defaultState = (cartItems!==null && cartItems.length >0)? cartItems: defaultState;\n\nlet getProductPosition = (cartItems, product) => {\n  let total = cartItems.length;\n\n  for (let i = 0; i < total; i++) {\n    if (cartItems[i].product.id === product.id) return i;\n  }\n\n  return -1;\n};\n\nconst carts = (state = defaultState, action) => {\n  let {\n    product,\n    quantity\n  } = action;\n  let position = -1;\n\n  switch (action.type) {\n    case types.BUY_PRODUCT:\n      // position = getProductPosition(state,product)\n      // if(position >-1){\n      // \tstate[position].quantity += quantity;\n      // } else{\n      // \tstate.push({product,quantity})\n      // }\n      // localStorage.setItem(configs.CARTS_FROM_LOCAL_STOGARE,JSON.stringify(state));\n      return state;\n\n    case types.UPDATE_PRODUCT:\n      return state;\n\n    case types.REMOVE_PRODUCT:\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default carts;","map":{"version":3,"sources":["/Users/thoanguyen/Downloads/react-training/React Zendvn/Chapter 4/cart practice 4/my-app/src/reducers/carts.js"],"names":["types","configs","defaultState","getProductPosition","cartItems","product","total","length","i","id","carts","state","action","quantity","position","type","BUY_PRODUCT","UPDATE_PRODUCT","REMOVE_PRODUCT"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,2BAAvB;AACA,OAAO,KAAKC,OAAZ,MAAyB,uBAAzB;AAEA,IAAIC,YAAY,GAAG,EAAnB,C,CACA;AACA;;AACA,IAAIC,kBAAkB,GAAG,CAACC,SAAD,EAAWC,OAAX,KAAsB;AAC9C,MAAIC,KAAK,GAAGF,SAAS,CAACG,MAAtB;;AACA,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAaA,CAAC,GAACF,KAAf,EAAqBE,CAAC,EAAtB,EAAyB;AACxB,QAAGJ,SAAS,CAACI,CAAD,CAAT,CAAaH,OAAb,CAAqBI,EAArB,KAA4BJ,OAAO,CAACI,EAAvC,EAA2C,OAAOD,CAAP;AAC3C;;AACD,SAAO,CAAC,CAAR;AACA,CAND;;AAOA,MAAME,KAAK,GAAG,CAACC,KAAK,GAAGT,YAAT,EAAuBU,MAAvB,KAAkC;AAChD,MAAI;AAACP,IAAAA,OAAD;AAASQ,IAAAA;AAAT,MAAqBD,MAAzB;AACA,MAAIE,QAAQ,GAAG,CAAC,CAAhB;;AACC,UAAOF,MAAM,CAACG,IAAd;AACC,SAAKf,KAAK,CAACgB,WAAX;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAOL,KAAP;;AACD,SAAKX,KAAK,CAACiB,cAAX;AACC,aAAON,KAAP;;AACD,SAAKX,KAAK,CAACkB,cAAX;AACA,aAAOP,KAAP;;AACA;AACC,aAAOA,KAAP;AAfF;AAiBA,CApBD;;AAsBA,eAAeD,KAAf","sourcesContent":["import * as types from './../constants/ActionType';\nimport * as configs from './../constants/Config';\n\nlet defaultState = [];\n// let cartItems = JSON.parse(localStorage.getItem(configs.CARTS_FROM_LOCAL_STOGARE))\n// defaultState = (cartItems!==null && cartItems.length >0)? cartItems: defaultState;\nlet getProductPosition = (cartItems,product) =>{\n\tlet total = cartItems.length;\n\tfor (let i=0;i<total;i++){\n\t\tif(cartItems[i].product.id === product.id) return i;\n\t}\n\treturn -1;\n}\nconst carts = (state = defaultState, action) => {\nlet {product,quantity} = action;\nlet position = -1;\n\tswitch(action.type){\n\t\tcase types.BUY_PRODUCT:\n\t\t // position = getProductPosition(state,product)\n\t\t // if(position >-1){\n\t\t // \tstate[position].quantity += quantity;\n\t\t // } else{\n\t\t // \tstate.push({product,quantity})\n\t\t // }\n\t\t\t// localStorage.setItem(configs.CARTS_FROM_LOCAL_STOGARE,JSON.stringify(state));\n\t\t\treturn state;\n\t\tcase types.UPDATE_PRODUCT:\n\t\t\treturn state;\n\t\tcase types.REMOVE_PRODUCT:\n\t\treturn state;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default carts;"]},"metadata":{},"sourceType":"module"}